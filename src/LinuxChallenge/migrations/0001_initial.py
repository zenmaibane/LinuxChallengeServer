# -*- coding: utf-8 -*-
<<<<<<< fd223ea8717c03b143ad1dfbf5d0eaffe531f47e
# Generated by Django 1.9.4 on 2016-03-28 04:53
=======
# Generated by Django 1.9.4 on 2016-03-28 05:40
>>>>>>> Use Pure.css
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_answer', models.CharField(max_length=255, verbose_name='解答')),
                ('time', models.DateTimeField()),
            ],
            options={
                'get_latest_by': 'time',
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Flag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_answer', models.CharField(max_length=255, unique=True, verbose_name='フラグ')),
                ('point', models.IntegerField(verbose_name='得点')),
            ],
            options={
                'ordering': ['question'],
            },
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.IntegerField(verbose_name='レベル')),
<<<<<<< fd223ea8717c03b143ad1dfbf5d0eaffe531f47e
                ('stage_limit_point', models.IntegerField(verbose_name='表示制限')),
=======
                ('stage_limit_point', models.IntegerField(verbose_name='表示制限ポイント')),
>>>>>>> Use Pure.css
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50, unique=True, verbose_name='title')),
                ('sentence', models.TextField(verbose_name='問題文')),
                ('level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='LinuxChallenge.Level', verbose_name='レベル')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$', 'Enter a valid username. This value may contain only letters, numbers and @/./+/-/_ characters.')], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
<<<<<<< fd223ea8717c03b143ad1dfbf5d0eaffe531f47e
                'abstract': False,
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
=======
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
>>>>>>> Use Pure.css
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.AddField(
            model_name='flag',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LinuxChallenge.Question', verbose_name='問題'),
        ),
        migrations.AddField(
            model_name='answer',
            name='flag',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='LinuxChallenge.Flag'),
        ),
        migrations.AddField(
            model_name='answer',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='LinuxChallenge.Question', verbose_name='問題'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='解答者'),
        ),
    ]
